require 'watir'
require 'open-uri'
require 'set'

RESOLVED_ISSUE_RANGE = (177..459).to_a
OPEN_ISSUE_RANGE = (460..466).to_a
BROWSER = Watir::Browser.new(:chrome, headless: true)
FEEDBACK_STRING_TO_AVOID = "For information about how to discuss this Public Review Issue and how to supply formal feedback"

def pri_url_generator(issue_number)
  return "https://www.unicode.org/review/pri#{issue_number}/"
end

def feedback_url_generator(issue_number)
   return "https://www.unicode.org/review/pri#{issue_number}/feedback.html"
end

def pri_page_scraper(issue_number)
  BROWSER.goto(pri_url_generator(issue_number))
  output_text = BROWSER.trs[3].inner_text.split("\n").first
  output_text.append(BROWSER.ps.each {|p| puts p.inner_text if !p.inner_text.include?("For information about how to discuss this Public Review Issue and how to supply formal feedback")})
  return output_text
end

def feedback_page_scraper(issue_number)
  BROWSER.goto(feedback_url_generator(issue_number))
  puts BROWSER.body.inner_text
end

# def scraper(url, year, month, message_id)
#   email_info = browser.ps[0..-2]  # => Returns all paragraphs, dropping last element which is of type "This archive was generated by hypermail 2.1.2..."
#   email_info = email_info.map {|v| v.text }
#   if browser.pre.exists?
#     email_info.select! {|v| !browser.pre.inner_text.include?(v)} # check if browser pre even exists
#   end
#   clean_text = sanitise(email_info)
#
#   File.write("TIM/#{year}-#{month}-#{message_id}.txt", clean_text.join("\n"), mode: "a")
# end
