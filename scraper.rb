require 'watir'

MONTHS = %w(01 02 03 04 05 06 07 08 09 10 11 12)
YEARS = (2001..2020).to_a # => Years in the archives of the Unicode速 Mail List (excluding the "Archives-Old" folder)
BASE_URL = "https://www.unicode.org/mail-arch/unicode-ml/"
BANNED_WORDS = %w(scripsit: wrote: writes:)

urls = []

def sanitise(input)
  input = input.map {|v| v.split("\n") }.flatten  # => Replace all \n with a space
  input.select! {|v| v != "" }  # => Drop all empty lines
  input.select! {|v| !v.start_with?('>') }  # => Remove lines that start with a >
  input.select! {|v| !BANNED_WORDS.include?(v.split.last) }  # => Drop lines that end with undesirable words
  return input
end

def valid_month(month, year)
  if (year == 2001 && month < 3) # No records this early present in the archives of the Unicode速 Mail List (excluding the "Archives-Old" folder)
    return false
  elsif (year == 2020 && month > 4) # No records more recent than this present in the archives of the Unicode速 Mail List
    return false
  elsif (year > 2020 || year < 2001) # Years not present in the archives of the Unicode速 Mail List
    return false
  else 
    return true
  end
end

def monthly_emails(url) # Get number of emails in that month
  browser = Watir::Browser.new(:chrome, headless: true)
  browser.goto url
  
  if(browser.strongs[2].exists?)
    return browser.strongs[2].inner_text.split(" ")[0]
  else
    return browser.a.inner_text.split(" ")[0]
  end
end

def scraper(url, year, month, message_id)
  browser = Watir::Browser.new(:chrome, headless: true)
  browser.goto url
  
  email_info = browser.ps[0..-2]  # => Returns all paragraphs, dropping last element which is of type "This archive was generated by hypermail 2.1.2..."
  email_info = email_info.map {|v| v.text }
  if browser.pre.exists?
    email_info.select! {|v| !browser.pre.inner_text.include?(v)} # check if browser pre even exists
  end
  clean_text = sanitise(email_info).each {|v| puts v }

  File.open("TIM/#{year}-#{month}-#{message_id}.txt", "w+") do |f|
    f.puts(clean_text)
  end
end

for year in YEARS
  for month in MONTHS
    if valid_month(month.to_i, year)
      period_url = "#{BASE_URL}y#{year}-m#{month}"
      for message in (0..(monthly_emails(period_url).to_i - 1)).to_a
        scraper("#{period_url}/#{"%04d" % message}.html", year, month, message)
      end
    end
  end 
end
